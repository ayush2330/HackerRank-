Consider the following:

A string,s , of length n where s=c0c1...c(n-1)
An integer,k , where  k is a factor of n.
We can split s into n/k substrings where each subtring, ti, consists of a contiguous block of k characters in s. Then, use each ti to create string ui such that:

The characters in ui are a subsequence of the characters in ti.
Any repeat occurrence of a character is removed from the string such that each character in ui occurs exactly once. 
In other words, if the character at some index j in ti occurs at a previous index <j in ti , then do not include the character in string ui.
Given s and k, print n/k lines where each line i denotes string ui.


def merge_the_tools(string, k):
    # your code goes here
    n=len(string)
    cnt=n//k
    for i in range(cnt):
        li=i*k
        substr=list(string[li:li+k])
        for j in range(k-1,-1,-1):
            if substr[j] in substr[0:j]:
                substr.pop(j)
        print(''.join(substr))
        
        
    
if __name__ == '__main__':
    string, k = input(), int(input())
    merge_the_tools(string, k)
